#!/usr/bin/env bash
#
# sim, centralized simulator launcher/controller
#   sim 
# Author: jtFuruhata, mhikichi1969
# Copyright (c) 2020 ETロボコン実行委員会, Released under the MIT license
# See LICENSE
#
# for developer: Athrill2 launcher has been moved to `asp/athrill_runner`

#
# `sim prefs` returns prefernces
# `sim export` writes preferences into settings.json at run time
#  (you should use `export launch` for export file into simdist/projName)
unset prefs
unset prefs_stop
if [ "$1" = "prefs" ] || [ "$1" = "export" ] || [ "$1" = "import" ]; then
    prefs="$1"
    shift
    if [ -z "`sim check sim`" ]; then
        prefs_stop="stop"
    fi
fi

# unset default envvars
if [ "$1" = "unset" ]; then
    unset ETROBO_SIM_VER
    unset ETROBO_SIM_DEV
    unset ETROBO_SIM_COMPANY
    unset ETROBO_SIM_NAME
    unset ETROBO_SIM_LOG
    unset ETROBO_SIM_DIST
    unset ETROBO_SIM_COMM
    unset ETROBO_LAUNCH_SIM
    . "$ETROBO_SCRIPTS/asp" unset
else
    # export default envvars
    export ETROBO_SIM_VER=`ls $ETROBO_ROOT/dist | grep ^etrobosim.*gz$ | sed -E "s/^etrobosim(.*)_.*.tar.gz/\1/" | tail -n 1`
    export ETROBO_SIM_DEV="UnityETroboSim"
    export ETROBO_SIM_COMPANY="ETロボコン実行委員会"
    export ETROBO_SIM_NAME="ETロボコンシミュレータ"
    export ETROBO_SIM_LOG="$ETROBO_SIM_COMPANY/$ETROBO_SIM_NAME/Player.log"
    if [ "$ETROBO_OS" = "win" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/AppData/LocalLow/$ETROBO_SIM_LOG"
    elif [ "$ETROBO_KERNEL" = "debian" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/.config/unity3d/$ETROBO_SIM_LOG"
    elif [ "$ETROBO_OS" = "mac" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/Library/Logs/$ETROBO_SIM_LOG"
    else
        unset ETROBO_SIM_LOG
    fi
    export ETROBO_SIM_DIST="$ETROBO_HRP3_WORKSPACE/simdist"
    . "$ETROBO_SCRIPTS/asp" env

    # course select
    app_prefix=""
    app_select="l_app"
    sim_select="left"
    app_req='{"LHackEV":1,"RHackEV":0}'
    if [ "$1" = "l" ] || [ "$1" = "left" ]; then
        app_prefix="l_"
        shift
    elif [ "$1" = "r" ] || [ "$1" = "right" ]; then
        app_prefix="r_"
        app_select="r_app"
        sim_select="right"
        app_req='{"LHackEV":0,"RHackEV":1}'
        shift
    fi
    ip=`cat "$ETROBO_ATHRILL_CONFIG" | grep DEBUG_FUNC_VDEV_TX_IPADDR | sed -E "s/^DEBUG_FUNC_VDEV_TX_IPADDR[ \t]*([^ \t]*$)/\1/"`
    if [ -z "$ip" ]; then
        ip="localhost"
    fi
    export ETROBO_SIM_COMM="http://$ip:54000/"

    #
    # `ver [version]` option selects version of UnityETroboSim
    #
    if [ "$1" = "ver" ]; then
        export ETROBO_SIM_VER="$2"
        shift 2
    fi

    # set sim launcher script
    if [ "$ETROBO_OS" = "chrome" ]; then
        os="linux"
    else
        os="$ETROBO_OS"
    fi
    if [ "$ETROBO_KERNEL" = "debian" ]; then
        export ETROBO_LAUNCH_SIM="\"${ETROBO_USERPROFILE}/etrobosim/etrobosim${ETROBO_SIM_VER}_${os}/${ETROBO_SIM_NAME}${ETROBO_EXE_POSTFIX}\" &"
    elif [ "$ETROBO_KERNEL" = "darwin" ]; then
        export ETROBO_LAUNCH_SIM="open -a \"/Applications/etrobosim/etrobosim${ETROBO_SIM_VER}_${os}${ETROBO_EXE_POSTFIX}\""
    else
        unset ETROBO_LAUNCH_SIM
    fi
fi

if [ "$1" != "env" ] && [ "$1" != "unset" ]; then
    #
    # `show` option shows full-path to UnityETroboSim
    #
    if [ "$1" = "show" ]; then
        shift
        echo $(eval echo "$ETROBO_LAUNCH_SIM")
    fi

    #
    # `sim check` command returns PID of sim, l_app, r_app and bt
    # 
    if [ "$1" = "check" ]; then
        if [ "$ETROBO_OS" = "win" ]; then
            checker='tasklist.exe /FI "imagename eq ${ETROBO_SIM_NAME}${ETROBO_EXE_POSTFIX}" | grep ${ETROBO_SIM_NAME} | sed -E "s/^${ETROBO_SIM_NAME}(.*$)/\1/"'
        else
            checker='ps aux | grep -v grep | grep etrobosim'
        fi
        pid=$(eval $checker | awk '{print $2}')

        if [ -z "$2" ] || [ "$2" == "sim" ]; then
            echo $pid
        fi
        if [ "$2" != "sim" ]; then
            # check athrill app by asp controller
            "$ETROBO_SCRIPTS/asp" check "$2"
        fi
        exit 0
    fi

    #
    # `sim status` shows status
    #
    if [ "$1" = "status" ]; then
        json=`curl -s -X GET $ETROBO_SIM_COMM 2>&1`
        if [ "$?" == "0" ];then
            echo "$json" | jq .
        fi
        exit 0
    fi

    #
    # `sim stop` command terminates sim, l_app, r_app and bt
    #
    if [ "$1" = "stop" ]; then
        # stop UnityETroboSim
        if [ -z "$2" ] || [ "$2" == "sim" ]; then
            shift
            pid="`sim check sim`"
            while [ -n "$pid" ]; do
                if [ "$ETROBO_OS" = "win" ]; then
                    taskkill.exe /pid $pid >NUL 2>&1
                else
                    kill $pid
                fi
                sleep 0.1
                pid="`sim check sim`"
            done
        fi
        # stop athrill apps by asp controller
        if [ -z "$2" ] || [ "$2" == "apps" ] || [ "$2" == "l_app" ]; then
            "$ETROBO_SCRIPTS/asp" stop l_app
        fi
        if [ -z "$2" ] || [ "$2" == "apps" ] || [ "$2" == "r_app" ]; then
            "$ETROBO_SCRIPTS/asp" stop r_app
        fi
        # stop btcat
        if [ -z "$2" ] || [ "$2" == "bt" ]; then
            shift
            "$ETROBO_SCRIPTS/asp" stop r_app
        fi
        exit 0
    fi

    #
    # auto robot start and stop
    #
    # `sim launch` starts and stops on specified course automatically.
    # `sim manual launch` doesn't start and stop automatically, just old `sim launch`
    #
    auto_start="auto"
    if [ "$1" = "manual" ]; then
        shift
        unset auto_start
    fi

    # `sim unprefs` doesn't load preferences from settings.json
    load_prefs="load"
    if [ "$1" = "unprefs" ] || [ "$1" = "noset" ]; then
        shift
        unset load_prefs
    fi

    # `sim stdout` launch asp as stdout
    unset stdout
    console="/dev/null"
    if [ "$1" = "stdout" ]; then
        shift
        stdout="stdout"
        console="/dev/`ps aux | grep 'ps aux' | tail -n 1 | awk '{print $7}'`"
    fi

    # `sim btcat` outputs Virtual BT into bt.log
    unset btcat
    if [ "$1" = "btcat" ]; then
        shift
        btcat="btcat"
    fi

    #
    # nextgen procedure of launching athrill apps from `simdist`:
    #
    # nextgen `sim launch` launches athrill apps via asp/athrill_runner.
    # `sim launchws` is no longer working.
    #
    # $ETROBO_ATHRILL_WORKSPACE
    #   |- athrill2
    # $ETROBO_SIM_DIST
    #   |- [projName]
    #   |   |- log.txt
    #   |   |- l_projName.asp
    #   |   |- r_projName.asp
    #   |   |- settings.json
    #   |   |- __ev3rt_bt_in
    #   |   |- __ev3rt_bt_out
    #   |   |- [__ev3rtfs]
    #   |- l_app.status
    #   |- r_app.status
    #
    # `sim launch [projName]` lanches both the UnityETroboSim and a Athrill app
    # `sim only launch [projName]` only lanches a Athrill app
    if [ "$1" = "wait" ]; then
        shift
    fi
    if [ "$1" = "only" ]; then
        sim_opt="only"
        shift
    else
        unset sim_opt
    fi

    unset projName
    unset target
    if [ "$1" = "launch" ]; then
        projName="$2"
        if [ -z "$projName" ] && [ -f "$ETROBO_HRP3_WORKSPACE/currentapp" ]; then
            currentapp=`head -n 1 "$ETROBO_HRP3_WORKSPACE/currentapp"`
            projName=`echo $currentapp | sed -E "s/^app=|img=(.*)$/\1/"`
        fi
        target="${app_prefix}${projName}.asp"
        if [ ! -f "$ETROBO_SIM_DIST/$projName/$target" ]; then
            target="${projName}.asp"
        fi
    elif [ -z "$sim_opt" ]; then
        sim_opt="skipASP"
        target="__dummy__"
    fi

    # launch a athrill app at background
    if [ -f "$ETROBO_SIM_DIST/$projName/$target" ] || [ "$sim_opt" == "skipASP" ]; then
        unset launcher_pid
        if [ "$sim_opt" != "skipASP" ]; then
            if [ "$sim_opt" == "only" ] && [ -z `sim check sim` ]; then
                "$ETROBO_SCRIPTS/asp" $stdout $app_prefix $btcat $projName
                # execution will deadlock here. to terminate, user have to hit Ctrl+C key.
            else
                "$ETROBO_SCRIPTS/asp" $stdout $app_prefix $btcat $projName &
            fi
            launcher_pid=$!
        fi

        # thread terminator
        loop="loop"
        trap "unset loop; echo ' now terminating...'" SIGINT
        trap "unset loop" EXIT

        # launch UnityETroboSim at background
        if [ "$sim_opt" != "only" ]; then
            if [ -z `sim check sim` ]; then
                if [ -f "$ETROBO_SIM_LOG" ]; then
                    mv -f "$ETROBO_SIM_LOG" "$(dirname "$ETROBO_SIM_LOG")/Player-prev.log"
                fi
                eval "$ETROBO_LAUNCH_SIM"
            fi
            # wait for starting up UnityETrobosim
            if [ "$ETROBO_SIM_VER" == "$ETROBO_PUBLIC_VER" ]; then
                hook="CONTROLLABLE"
                unset comm_ready
            else
                hook="UIHttpServer start"
                comm_ready="init"
            fi
            while [ -z "`cat "$ETROBO_SIM_LOG" 2>&1 | grep "$hook"`" ] && [ -n "$loop" ]; do
                sleep 0.1
                if [ -z "`sim check sim`" ]; then
                    echo "[ launcher: etrobosim was already terminated. ]" | tee $console
                    unset loop
                    unset comm_ready
                fi
            done
            if [ "$sim_opt" != "skipASP" ] && [ -n "$loop" ]; then
                echo "[ launcher: $hook detected ]"
            fi

            # wait for starting up UIcomm
            if [ "$comm_ready" == "init" ]; then
                response=`curl -s -X GET $ETROBO_SIM_COMM -w '\n%{http_code}\n'`
                json=`echo "$response" | sed '$d'`
                code=`echo "$response" | tail -n 1`
                while [ "$code" == "500" ] && [ -n "$loop" ]; do
                    sleep 0.1
                    response=`curl -s -X GET $ETROBO_SIM_COMM -w '\n%{http_code}\n'`
                    json=`echo "$response" | sed '$d'`
                    code=`echo "$response" | tail -n 1`
                done
                if [ "$code" == "200" ]; then
                    comm_ready="ready"
                    if [ "$sim_opt" != "skipASP" ]; then
                        echo "[ launcher: connected to UIcomm ]" | tee $console
                    fi
                else
                    echo "[ launcher: etrobosim was already terminated. ]" | tee $console
                    unset comm_ready
                    unset loop
                fi
            fi                

            # return or export prefs
            if [ -n "$prefs" ] && [ "$comm_ready" == "ready" ]; then
                invoker="curl -s -X GET ${ETROBO_SIM_COMM}?GET=PREFS | jq -M ."
                if [ "$prefs" == "export" ] || [ "$prefs" == "import" ]; then
                    eval "$invoker" > settings.json
                else
                    eval "$invoker"
                fi
                if [ "$prefs_stop" == "stop" ] && [ "$sim_opt" == "skipASP" ]; then
                    sim stop sim
                fi
            fi

            # load prefernces from settings.json
            if [ -n "$load_prefs" ] && [ -f settings.json ] && [ "$comm_ready" == "ready" ]; then
                req="`cat settings.json | jq -M -c .`"
                if [ -n "$req" ]; then
                    curl -s -X POST -d $req $ETROBO_SIM_COMM > /dev/null
                    sleep 1     # @ToDo: its magic number
                else
                    echo "[ launcher: WARNING: illegal settings.json ]" | tee $console
                fi
            fi

            # exit if no launch
            if [ "$sim_opt" == "skipASP" ]; then
                if [ -z "$loop" ]; then
                    exit 1
                else
                    exit 0
                fi
            fi

            if [ "$comm_ready" == "ready" ]; then
                rm -f result.json
                # put HackEV onto specified course and wait connected
                curl -s -X POST -d $app_req $ETROBO_SIM_COMM > /dev/null
                sleep 1     # @ToDo: its magic number

                # wait for EV3RT is ready
                counter=0
                status="`\"$ETROBO_SCRIPTS/asp\" status $app_select`"
                while [ $status -lt 1 ] && [ -n "$loop" ]; do
                    if [ $status -eq 0 ]; then
                        echo "[ launcher: runner was already dead. ]" | tee $console
                        unset loop
                        kill -s SIGINT $$
                    fi
#                    counter=$(( $counter + 1 ))
#                    if [ $counter -ge 150 ]; then
#                        echo "[ launcher: EV3RT boot sequence time out]"
#                        unset loop
#                        kill -s SIGINT $$
#                    fi
                    sleep 0.1
                    status="`\"$ETROBO_SCRIPTS/asp\" status $app_select`"
                done
                if [ -n "$loop" ]; then
                    echo "[ launcher: EV3RT is booted up, got it ]" | tee $console
                fi

                counter=0
                response=`curl -s -X GET $ETROBO_SIM_COMM`
                while [ -z "`echo "$response" | jq -r .$sim_select.mode | grep CONNECTING`" ] && [ -n "$loop" ]; do
                    sleep 0.1
                    counter=$(( $counter + 1 ))
                    if [ $counter -ge 100 ]; then
                        echo "[ launcher: autostart sequence timeout before PREPARE ]" | tee $console
                        unset loop
                    fi
                    if [ -z "`sim check sim`" ]; then
                        echo "[ launcher: etrobosim was already terminated. ]" | tee $console
                        unset loop
                        unset comm_ready
                    fi
                    response=`curl -s -X GET $ETROBO_SIM_COMM`
                done

                if [ -z `sim check sim` ]; then
                    unset loop
                else
                    if [ -n "$loop" ]; then
                        echo "[ launcher: ready to start on $sim_select course ]" | tee $console
                    fi

                    # auto start sequence
                    if [ "$ETROBO_SIM_VER" != "$ETROBO_PUBLIC_VER" ] && [ -n "$loop" ]; then
                        # request PREPARE and wait READY
                        echo "[ launcher: Go to the start, Ready? ]" | tee $console
                        json=`curl -s -X GET $ETROBO_SIM_COMM?MEASUREMENT=PREPARE`
                        sleep 1     # @ToDo: its magic number
                        counter=0
                        while [ "`echo $json | jq -r .measurement.mode`" != "READY" ] && [ -n "$loop" ]; do
                            sleep 0.1
                            counter=$(( $counter + 1 ))
                            if [ $counter -ge 100 ]; then
                                echo "[ launcher: autostart sequence timeout after PREPARE ]" | tee $console
                                unset loop
                            fi
                            if [ -z "`sim check sim`" ]; then
                                echo "[ launcher: etrobosim was already terminated. ]" | tee $console
                                unset loop
                                unset comm_ready
                            fi
                            json=`curl -s -X GET $ETROBO_SIM_COMM`
                        done
                        # auto start
                        echo -n "[ launcher: 3..." | tee $console
                        sleep 1
                        echo -n "2..." | tee $console
                        sleep 1
                        echo -n "1..." | tee $console
                        sleep 1
                        if [ -n "$auto_start" ]; then
                            json=`curl -s -X GET $ETROBO_SIM_COMM?MEASUREMENT=GO`
                            echo " ]" | tee $console
                            echo "[ launcher: Go!!!!!!!! ]" | tee $console
                        else
                            echo "[ launcher: $sim_select: manual start ]" | tee $console
                        fi
                    fi
                fi
            elif [ -n "$loop" ]; then
                echo
                echo "*** WARNING ***"
                echo
                echo "You are *NOT* using the 'etrobosim$ETROBO_COMPETITION_VER' which is a simulator for competition."
                echo "If you are a participant, run 'update sim' to download it."
                echo
            fi
        fi

        # loop while UnityETroboSim is running
        unset start_gate
        unset gate1
        unset gate2
        unset goal
        start_time=`date "+%s"`
        while [ -n "$loop" ] && [ -n "`sim check sim`" ]; do
            sleep 0.1
            json=`curl -s -X GET $ETROBO_SIM_COMM`
            if [ -n "$json" ]; then
                if [ "`echo $json | jq -r .measurement.mode`" == "END" ]; then
                    echo "[ launcher: end of this race ]" | tee $console
                    echo "$json" | jq . > result.json
                    unset loop
                fi

                # competition rules
                if [ -z "$start_gate" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.RUN_TIME`" != "0" ]; then
                    echo "[ launcher: $sim_select: passed Start Gate ]"
                    start_gate="passed"
                fi
                if [ -n "$start_gate" ] && [ -z "$gate1" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.GATE1`" == "1" ]; then
                    echo "[ launcher: $sim_select: passed Gate 1 ]"
                    gate1="passed"
                fi
                if [ -n "$gate1" ] && [ -z "$gate2" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.GATE2`" == "1" ]; then
                    echo "[ launcher: $sim_select: passed Gate 2 ]"
                    gate2="passed"
                fi
                if [ -n "$gate2" ] && [ -z "$goal" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.GOAL`" == "1" ]; then
                    measurement_time=`echo $json | jq -r .${sim_select}Measurement.MEASUREMENT_TIME`
                    goal=`printf %04d $measurement_time | sed -E 's/^([0-9]*)([0-9]{3})$/\1\.\2/'`
                    echo "[ launcher: $sim_select: GOAL!  Goal Time: $goal ]"
                fi
            else
                unset loop
            fi
            if [ $((`date "+%s"` - start_time)) -gt 300 ] && [ -n "$auto_start" ]; then
                echo "[ launcher: past 5 minute from `date --date=@$start_time`. ]"
                unset loop
            fi
        done

        # terminate launcher
        "$ETROBO_SCRIPTS/asp" stop
        if [ -n "$launcher_pid" ]; then
            wait $launcher_pid
        fi
    fi
fi
