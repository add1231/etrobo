#!/usr/bin/env bash
#
# raceserv, ET robocon race server
#   raceserv 
# Author: jtFuruhata
# Copyright (c) 2020 ETロボコン実行委員会, Released under the MIT license
# See LICENSE
#
# fp0 ... 2020/09/13 13:00～2020/09/13 16:00
# fp1 ... 2020/09/16 12:00～2020/09/22 20:00
# fp2 ... 2020/10/17 12:00～2020/10/25 20:00
#

#
# define error codes
#
ERR_OK=0
ERR_ERR=1
ERR_ARC_PROJECT_NOT_FOUND=101
ERR_ARC_COPY_FAILED=102
ERR_ARC_FILE_NOT_FOUND=103
ERR_ARC_ZIP_FAILED=104
ERR_ARC_ZIP_TOO_LARGE=105
ERR_SEQ_RACEFOLDER_NOT_FOUND=201
ERR_SEQ_UNZIP_FAILED=202
ERR_SEQ_RACE_NOT_FOUND=203
ERR_SEQ_ASP_NOT_FOUND=204
ERR_SEQ_MD5SUM_MISMATCH=205
ERR_SEQ_REQUESTS_EMPTY=206
ERR_SEQ_SIM_LAUNCH_FAILED=207
ERR_SEQ_FFMPEG_FAILED=208
ERR_SEQ_ZIP_FAILED=209

exit_code=ERR_OK

#
# `ver=<version>` option selects version of UnityETroboSim
#
unset sim_ver
if [ -n "`echo $1 | grep ^ver=`" ]; then
    sim_ver="ver=`echo $1 | grep ^ver= | sed -E 's/^ver=(.*)$/\1/'`"
    shift
fi

unset vm
if [ "$1" == "vm" ]; then
    vm="vm"
    shift
fi

if [ -n "$2" ] && [ "$1" == "fp0" ] || [ "$1" == "fp1" ] || [ "$1" == "fp2" ] || [ "$1" == "final" ];then
    # prepare race folder
    mode="$1"
    raceFolder="$2"
    rm -f "$raceFolder/"*.manifest
    cd "$raceFolder"

    # launch taskscheduler for ETroboSimRunner.Relay
    if [ -n "$vm" ]; then
        ETroboSimRunner.Relay.sh serv "$raceFolder" &
        trap "touch stop_relay" EXIT
    fi

    #
    # server main loop
    #
    # to stop server safely, `touch stop` on race folder
    #
    main_loop="loop"
    while [ -n "$main_loop" ]; do
        echo
        echo "[ raceserv: waiting for Requests ]"
        wait_loop="loop"
        while [ -n "$wait_loop" ]; do
            sleep 1
            # raceserv stop
            if [ -f "$raceFolder/stop" ]; then
                rm -f "$raceFolder/stop"
                unset wait_loop
                unset main_loop
            fi
            # wait requests
            ls="`ls \"$raceFolder/Requests\" | grep -v ^cancel_ 2>&1`"
            ls "$raceFolder/Requests" | grep -v ^cancel_ > /dev/null 2>&1 
            if [ "$?" == "0" ] && [ -n "$ls"  ]; then
                unset wait_loop
            fi
        done
        if [ -n "$main_loop" ]; then
            #
            # invoke race
            #
            race $sim_ver $mode "$raceFolder"
            race_error="$?"

            # get zip filename from manifest
            manifest="`ls \"$raceFolder\" | grep .manifest$`"
            zipname="`echo $manifest | sed -E 's/^(.*).manifest/\1/'`"
            if [ "$?" == "$ERR_OK" ] && [ "$race_error" != "ERR_SEQ_ZIP_FAILED" ]; then
                # put ERROR.txt into zip file 
                if [ "$race_error" != "$ERR_OK" ]; then
                    case "$race_error" in
                        "$ERR_SEQ_UNZIP_FAILED" ) 
                            mes="illegal zip file: unzip failed. you should run 'race zip'." ;;
                        "$ERR_SEQ_RACE_NOT_FOUND" ) 
                            mes="illegal zip file: __race folder not found. you should run 'race zip'." ;;
                        "$ERR_SEQ_ASP_NOT_FOUND" ) 
                            mes="illegal zip file: .asp file not found. you should run 'make app=<projName> sim up' first." ;;
                        "$ERR_SEQ_MD5SUM_MISMATCH" ) 
                            mes="illegal zip file: MD5 check sum mismatched. you should run 'update' first." ;;
                        "$ERR_SEQ_FFMPEG_FAILED" ) 
                            mes="video encode error: This error appears when your HackEV did flying-start or Athrill app was corrupted." ;;
                        * ) 
                            mes="an error has occured while this race." ;;
                    esac

                    echo "[ raceserv: ERROR: $mes ]"
                    echo "$mes" > ERROR.txt
                    zip $zipname ERROR.txt > /dev/null
                    cp -f $zipname "$raceFolder/Results/"
                    rm $zipname
                    rm ERROR.txt
                fi
            else
                echo "[ raceserv: WARNING : result zip file creation failed!!! ]"
            fi

            # request post and get via ETroboSimRunner.Relay
            if [ -n "$vm" ]; then
                ETroboSimRunner.Relay.sh "$raceFolder"
            fi
        fi
        rm -f "$raceFolder/"*.manifest
    done
else
    echo "usage: raceserv [ver=<SIM_VER>] [vm] fp1|fp2|final /path/to/raceFolder"
fi
